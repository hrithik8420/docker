# Docker Build & Run Troubleshooting Guide

This file lists common errors you may face during `docker build` and `docker run`,
with causes and resolutions.

----------------------------------------------------
1. Errors during `docker build`
----------------------------------------------------

1.1 Dependency Resolution Errors
- Error: ResolutionImpossible
- Cause: Pip/npm cannot resolve version conflicts between dependencies.
- Fix: Loosen version constraints in requirements.txt or package.json.

1.2 Externally-managed Environment (Debian/Ubuntu)
- Error: externally-managed-environment when using pip install.
- Cause: Python 3.12+ restricts system-wide pip installs.
- Fix: Use:
  RUN pip install --no-cache-dir -r requirements.txt --break-system-packages

1.3 File Copy Issues
- Error: COPY failed: file not found in build context
- Cause: File (e.g., requirements.txt) not in build context directory.
- Fix: Ensure files exist in same folder as Dockerfile or adjust paths.

1.4 Network Issues
- Error: Temporary failure resolving pypi.org / npm registry
- Cause: Network isolation or DNS issues inside build container.
- Fix: Run with host network: docker build --network=host .

1.5 Permission Errors
- Error: Permission denied when copying or writing inside container.
- Fix: Use correct ownership or add non-root user:
  RUN adduser --disabled-password appuser
  USER appuser

----------------------------------------------------
2. Errors during `docker run`
----------------------------------------------------

2.1 Port Conflicts
- Error: port is already allocated
- Cause: Host port already in use.
- Fix: Use a different port mapping: docker run -p 8080:8000 image-name

2.2 Entrypoint / CMD Issues
- Error: executable file not found in $PATH
- Cause: Wrong CMD/ENTRYPOINT or missing runtime.
- Fix: Ensure runtime is installed and CMD is correct.

2.3 CrashLoop / App Exit
- Error: Container exits immediately after start.
- Cause: Last CMD finishes (e.g., script ends).
- Fix: Ensure app runs as long-running service (e.g., uvicorn, nginx).

2.4 Network Communication (Frontend â†” Backend)
- Error: Connection refused when one container calls another.
- Cause: Containers are isolated by default.
- Fix: Use Docker Compose and service names:
  fetch("http://backend:8000/")

2.5 Volume Mount Conflicts
- Error: Permission denied on mounted volumes.
- Cause: Host and container users mismatch.
- Fix: Align permissions or run container with matching UID/GID.

----------------------------------------------------
Pro Tips for Production
----------------------------------------------------
- Use multi-stage or distroless images to reduce size and attack surface.
- Add HEALTHCHECK in Dockerfile or docker-compose.yml.
- Use .dockerignore to avoid copying unnecessary files.
