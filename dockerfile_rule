Dockerfile Guide for Interviews - Clear and Precise Answers

When explaining Dockerfiles in an interview, you should cover key instructions, their purpose, and the concept of single-stage vs multi-stage builds clearly.

---

## Key Dockerfile Instructions

**1. FROM**

* Base image for your container.
* Example: `FROM python:3.12-slim`
* **Purpose:** Provides a starting environment so you donâ€™t build everything from scratch.

**2. WORKDIR**

* Sets the working directory inside the container.
* Example: `WORKDIR /app`
* **Purpose:** Organizes files and simplifies path references.

**3. COPY / ADD**

* Copies files from host to container.
* Example: `COPY . .`
* **Purpose:** Makes your application code and resources available inside the container.

**4. RUN**

* Executes a command during **image build**.
* Example: `RUN pip install -r requirements.txt`
* **Purpose:** Installs dependencies or sets up environment.
* **Tip:** Creates a layer; happens once per build.

**5. ENV**

* Sets environment variables.
* Example: `ENV ENVIRONMENT=production`
* **Purpose:** Configurable behavior without modifying code.

**6. EXPOSE**

* Documents the port the container listens on.
* Example: `EXPOSE 8080`
* **Purpose:** Helps with network setup.

**7. CMD**

* Default command when container runs.
* Example: `CMD ["python", "app.py"]`
* **Purpose:** Specifies main process; can be overridden.

**8. ARG**

* Build-time variable.
* Example: `ARG VERSION=1.0`
* **Purpose:** Flexible builds, versioning.

**9. USER**

* Sets user for container processes.
* Example: `USER appuser`
* **Purpose:** Security, avoid running as root.

**10. ENTRYPOINT**

* Command that runs when container starts; harder to override.
* Example: `ENTRYPOINT ["python"]`
* **Purpose:** Used with CMD for default arguments.

---

## Single-Stage Build

* All instructions in one stage.
* Produces a single image.
* Simple, but may include unnecessary build files.
* **Example:**

```dockerfile
FROM python:3.12-slim
WORKDIR /app
COPY . .
RUN pip install -r requirements.txt
EXPOSE 8080
CMD ["python", "app.py"]
```

## Multi-Stage Build

* Uses multiple `FROM` statements.
* Separates build and runtime stages.
* Produces smaller, cleaner, more secure images.
* **Example:**

```dockerfile
# Stage 1: Build
FROM python:3.12-slim AS builder
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .

# Stage 2: Runtime
FROM python:3.12-slim
WORKDIR /app
COPY --from=builder /app /app
EXPOSE 8080
CMD ["python", "app.py"]
```

* **Benefits:** Smaller image size, no unnecessary build tools in runtime image, better security.

---

## RUN vs CMD (Interview Ready Answer)

| Feature           | RUN                               | CMD                                               |
| ----------------- | --------------------------------- | ------------------------------------------------- |
| **When executed** | During image build                | During container runtime                          |
| **Creates layer** | Yes                               | No                                                |
| **Purpose**       | Install dependencies, prepare env | Default command for container                     |
| **Override**      | Cannot override at runtime        | Can override using `docker run <image> <command>` |
| **Frequency**     | Once per build                    | Every container start                             |

---

**Tips for Interview:**

1. Always mention the purpose of each instruction.
2. Explain single-stage vs multi-stage clearly.
3. Give examples wherever possible.
4. Highlight best practices: small images, minimized layers, security, and caching.
5. Be concise and confident when explaining RUN vs CMD.
